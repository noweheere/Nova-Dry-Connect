
{
  "common": {
    "edit": "Edit",
    "start": "Start",
    "pause": "Pause",
    "resume": "Resume",
    "stop": "Stop",
    "save": "Save",
    "reset": "Reset to Defaults",
    "step": "Step",
    "target": "Target"
  },
  "nav": {
    "dashboard": "Dashboard",
    "recipes": "Recipes",
    "logbook": "Logbook",
    "terminal": "Terminal",
    "guide": "Guide",
    "hardware": "Hardware",
    "settings": "Settings"
  },
  "header": {
    "title": "NovaDry Connect",
    "connected": "Connected",
    "disconnected": "Disconnected",
    "connect": "Connect",
    "disconnect": "Disconnect"
  },
  "connectionModal": {
    "title": "Choose Connection Method",
    "description": "Select how you want to connect to the NovaDry system.",
    "serialTitle": "Connect via Serial (RS-232)",
    "serialDescription": "Connect directly to your freeze dryer hardware using a USB-to-Serial adapter.",
    "demoTitle": "Use Demo Mode",
    "demoDescription": "Run a simulated process without any hardware. Ideal for testing and exploring the app."
  },
  "dashboard": {
    "welcomeTitle": "Welcome to NovaDry Connect",
    "welcomeSubtitle": "Your hub for precision freeze-drying.",
    "connectMessage": "Please connect to your NovaLabs Freeze Dryer to begin.",
    "lastBatchTitle": "Last Batch Summary",
    "name": "Name",
    "quantity": "Quantity",
    "recipe": "Recipe",
    "completedOn": "Completed On"
  },
  "processMonitor": {
    "systemIdle": "System Idle",
    "startFromRecipes": "Start a new batch from the Recipes screen.",
    "temperature": "Temperature",
    "pressure": "Pressure",
    "elapsedTime": "Elapsed Time"
  },
  "recipes": {
    "title": "Recipes",
    "newRecipe": "New Recipe",
    "disconnectedWarningTitle": "Device Disconnected",
    "disconnectedWarningBody": "Please connect to the dryer to start a process.",
    "startProcessTooltip": "Connect dryer to start"
  },
  "logbook": {
    "title": "Batch Logbook",
    "addManualEntry": "Add Manual Entry",
    "noBatchesTitle": "No Batches Logged",
    "noBatchesBody": "Completed processes will appear here.",
    "ranOn": "Ran on",
    "with": "with",
    "quantity": "Quantity",
    "sieves": "Sieves",
    "washCycles": "Wash Cycles",
    "trayType": "Tray Type",
    "notes": "Notes",
    "noNotes": "No notes for this batch."
  },
  "settings": {
    "title": "Settings",
    "header": "Default Parameters",
    "description": "These values are used as a baseline for new recipes, based on standard Harvest Right settings. Adjust them to fit your needs.",
    "freezeTemp": "Default Freeze Temp (°C)",
    "dryTemp": "Default Final Dry Temp (°C)",
    "pressure": "Default Vacuum Pressure (mTorr)",
    "extraDryTime": "Default Extra Dry Time (minutes)"
  },
  "guide": {
    "title": "Guides & Information",
    "prep": {
      "title": "Bubble Hash Preparation Guide",
      "p1": "Proper preparation is key to a successful freeze-dry. Follow these steps for optimal results:",
      "steps": [
        "Collect & Sieve: After washing, collect your hash from the different micron bags. Gently press out excess water.",
        "Microplane/Sieve: Freeze the collected hash patty solid. Once frozen, grate it into a fine powder using a microplane or push it through a stainless steel strainer. This dramatically increases surface area for even drying.",
        "Pre-freeze Trays: Place parchment paper on your freeze dryer trays and put them in a standard freezer to get them cold before loading the hash.",
        "Load Trays: Sprinkle the powdered hash evenly and thinly across the cold, parchment-lined trays. Avoid clumps and thick piles.",
        "Load into Dryer: Immediately transfer the loaded trays into the NovaLabs Freeze Dryer and begin your selected cycle."
      ]
    },
    "trays": {
      "title": "Understanding Tray Types",
      "p1": "The type of tray you use can influence the drying process. Here are some common types:",
      "p2": "For bubble hash, <strong>Standard Stainless Steel</strong> trays lined with parchment paper are the most common and effective choice. They provide excellent thermal conductivity."
    },
    "timer": {
      "title": "Timer & Reminder",
      "p1": "Remember to set timers for your wash cycles to maintain consistency.",
      "p2": "A dedicated timer feature will be added in a future update."
    }
  },
  "hardware": {
    "title": "Hardware Integration Guide",
    "intro": {
      "title": "Listing Available Ports",
      "p1": "The Web Serial API allows web applications to communicate with serial devices. Before connecting, you can get a list of ports the user has previously granted access to.",
      "p2": "The following code snippet demonstrates how to retrieve and display information about already permitted serial ports.",
      "code": "async function listGrantedPorts() {\n  if ('serial' in navigator) {\n    const ports = await navigator.serial.getPorts();\n    console.log(`Found ${ports.length} permitted ports.`);\n    for (const port of ports) {\n      const info = port.getInfo();\n      console.log('Port Info:', info);\n      // info contains usbVendorId and usbProductId\n    }\n  } else {\n    console.error('Web Serial API not supported.');\n  }\n}\nlistGrantedPorts();"
    },
    "detection": {
      "title": "Automatic Device Detection (VID/PID)",
      "p1": "The most reliable way to identify a specific device is by its USB Vendor ID (VID) and Product ID (PID). You can ask the user to select a device that matches a specific VID/PID pair.",
      "p2": "This is the primary method used to differentiate between various types of serial adapters.",
      "code": "async function requestPortWithFilters(filters) {\n  try {\n    // Prompt user to select a port matching the filters.\n    const port = await navigator.serial.requestPort({ filters });\n    const info = port.getInfo();\n    console.log(`Vendor ID: ${info.usbVendorId}, Product ID: ${info.usbProductId}`);\n    return port;\n  } catch (error) {\n    console.error('No port selected or an error occurred:', error);\n  }\n}\n\n// Example: const filters = [{ usbVendorId: 0x1234, usbProductId: 0x5678 }];\n// requestPortWithFilters(filters);"
    },
    "ftdi": {
      "title": "FTDI Adapters",
      "p1": "FTDI (Future Technology Devices International) is a very common manufacturer of USB-to-Serial converter chips. Their official Vendor ID is 0x0403.",
      "codeTitle": "Scan for FTDI Devices",
      "code": "const ftdiFilters = [{ usbVendorId: 0x0403 }];\n\nasync function connectToFTDI() {\n  const port = await navigator.serial.requestPort({ filters: ftdiFilters });\n  if (!port) return;\n\n  await port.open({ baudRate: 9600 });\n  console.log('Connected to FTDI device!');\n  \n  // Example: Write data\n  const writer = port.writable.getWriter();\n  const data = new Uint8Array([0x48, 0x65, 0x6c, 0x6c, 0x6f]); // 'Hello'\n  await writer.write(data);\n  writer.releaseLock();\n}\n\nconnectToFTDI();"
    },
    "generic": {
      "title": "Generic Adapters (CH340/CP210x)",
      "p1": "Many budget-friendly microcontrollers and adapters use chips like the WCH CH340 or Silicon Labs CP210x. They have their own distinct Vendor IDs.",
      "listTitle": "Common VIDs:",
      "vid1": "CH340/CH341: 0x1A86",
      "vid2": "CP210x: 0x10C4",
      "codeTitle": "Scan for Common Generic Adapters",
      "code": "const genericFilters = [\n  { usbVendorId: 0x1A86 }, // CH340\n  { usbVendorId: 0x10C4 }, // CP210x\n];\n\nasync function connectToGeneric() {\n  const port = await navigator.serial.requestPort({ filters: genericFilters });\n  if (!port) return;\n  // ... connection logic similar to FTDI ...\n  console.log('Connected to a generic serial adapter!');\n}\n\nconnectToGeneric();"
    },
    "stlink": {
      "title": "ST-Link Debuggers",
      "p1": "ST-Link programmers, used for STM32 microcontrollers, often include a Virtual COM Port (VCP) for serial communication. The Vendor ID for STMicroelectronics is 0x0483.",
      "listTitle": "Common PIDs:",
      "pid1": "ST-Link/V2: 0x3748",
      "pid2": "ST-Link/V2.1: 0x374B",
      "pid3": "ST-LINK-V3: 0x374F, 0x3752",
      "codeTitle": "Scan for ST-Link VCP",
      "code": "const stlinkFilters = [\n  { usbVendorId: 0x0483, usbProductId: 0x3748 },\n  { usbVendorId: 0x0483, usbProductId: 0x374B },\n  { usbVendorId: 0x0483, usbProductId: 0x374F },\n  { usbVendorId: 0x0483, usbProductId: 0x3752 },\n];\n\nasync function connectToSTLink() {\n  const port = await navigator.serial.requestPort({ filters: stlinkFilters });\n  if (!port) return;\n  console.log('Connected to ST-Link Virtual COM Port!');\n}\n\nconnectToSTLink();"
    },
    "buspirate": {
      "title": "Bus Pirate",
      "p1": "The Bus Pirate is a versatile hardware debugging tool that communicates over a serial console. It has a specific VID/PID and a text-based command interface.",
      "listTitle": "VID/PID:",
      "vidpid": "VID: 0x04D8, PID: 0xFB00 (v3/v4)",
      "codeTitle": "Communicate with Bus Pirate",
      "code": "const busPirateFilter = [{ usbVendorId: 0x04D8, usbProductId: 0xFB00 }];\n\nasync function talkToBusPirate() {\n  const port = await navigator.serial.requestPort({ filters: busPirateFilter });\n  if (!port) return;\n  await port.open({ baudRate: 115200 });\n\n  const writer = port.writable.getWriter();\n  const reader = port.readable.getReader();\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n\n  // Enter raw bitbang mode\n  await writer.write(encoder.encode('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')); // Send 10 newlines to reset\n  await new Promise(r => setTimeout(r, 50)); // Wait for reset\n\n  // Send 'i' for info\n  await writer.write(encoder.encode('i\\n'));\n\n  // Read response\n  const { value } = await reader.read();\n  console.log(decoder.decode(value));\n\n  writer.releaseLock();\n  reader.releaseLock();\n}\n\ntalkToBusPirate();"
    },
    "flipper": {
      "title": "Flipper Zero",
      "p1": "The Flipper Zero provides a command-line interface (CLI) over its USB serial port, allowing for programmatic control and information retrieval.",
      "listTitle": "VID/PID:",
      "vidpid": "VID: 0x0483, PID: 0x5740",
      "codeTitle": "Get Flipper Zero Device Info",
      "code": "const flipperFilter = [{ usbVendorId: 0x0483, usbProductId: 0x5740 }];\n\nasync function getFlipperInfo() {\n  const port = await navigator.serial.requestPort({ filters: flipperFilter });\n  if (!port) return;\n  await port.open({ baudRate: 115200 });\n\n  const writer = port.writable.getWriter();\n  const reader = port.readable.getReader();\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder();\n\n  // Send 'device_info' command with carriage return\n  await writer.write(encoder.encode('device_info\\r'));\n  \n  // Read response until prompt '>' appears\n  let response = '';\n  while (!response.includes('>')) {\n    const { value, done } = await reader.read();\n    if (done) break;\n    response += decoder.decode(value, { stream: true });\n  }\n  console.log(response);\n  \n  writer.releaseLock();\n  reader.releaseLock();\n}\n\ngetFlipperInfo();"
    }
  },
  "terminal": {
    "title": "Device Terminal",
    "offlineTitle": "Terminal Offline",
    "offlineBody": "Connect to a device to see live data.",
    "welcome1": "Welcome to the NovaDry Terminal.",
    "welcome2": "Raw device data will appear here when connected."
  },
  "app": {
    "connectFirstWarning": "Please connect to the dryer first or wait for the current process to finish."
  }
}